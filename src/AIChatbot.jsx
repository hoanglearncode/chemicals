import React, { useState, useRef, useEffect } from 'react';
import './assets/App.css'
import { Send, Mic, Paperclip, RotateCcw, Copy, ThumbsUp, ThumbsDown, User, Bot, Menu, Plus, MessageSquare, BookOpen, GraduationCap, Target, Lightbulb, TrendingUp } from 'lucide-react';

const AIChatbot = () => {
  const [messages, setMessages] = useState([
    {
      id: 1,
      type: 'bot',
      content: `Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi **EduGuide AI**! üéì

T√¥i l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ ƒë·ªãnh h∆∞·ªõng gi√°o d·ª•c v√† ph√°t tri·ªÉn ngh·ªÅ nghi·ªáp. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:

‚Ä¢ **Ph√¢n t√≠ch nƒÉng l·ª±c c√° nh√¢n** - ƒê√°nh gi√° ƒëi·ªÉm m·∫°nh, s·ªü th√≠ch
‚Ä¢ **ƒê·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp** - T∆∞ v·∫•n ng√†nh h·ªçc v√† con ƒë∆∞·ªùng ph√°t tri·ªÉn  
‚Ä¢ **L·∫≠p l·ªô tr√¨nh h·ªçc t·∫≠p** - K·∫ø ho·∫°ch chi ti·∫øt theo m·ª•c ti√™u
‚Ä¢ **Ph√°t tri·ªÉn k·ªπ nƒÉng** - Soft skills v√† hard skills c·∫ßn thi·∫øt
‚Ä¢ **C·∫≠p nh·∫≠t xu h∆∞·ªõng** - Ng√†nh ngh·ªÅ hot v√† c∆° h·ªôi vi·ªác l√†m

H√£y b·∫Øt ƒë·∫ßu b·∫±ng c√°ch chia s·∫ª v·ªÅ b·∫£n th√¢n ho·∫∑c m·ª•c ti√™u c·ªßa b·∫°n! üí°`,
      timestamp: new Date().toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);

  const quickPrompts = [
    { icon: GraduationCap, text: "T√¥i l√† h·ªçc sinh l·ªõp 12 c·∫ßn ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp", category: "career" },
    { icon: TrendingUp, text: "C√°c ng√†nh h·ªçc hot hi·ªán nay l√† g√¨?", category: "trends" },
    { icon: Target, text: "L√†m sao ƒë·ªÉ l·∫≠p k·∫ø ho·∫°ch h·ªçc t·∫≠p hi·ªáu qu·∫£?", category: "planning" },
    { icon: Lightbulb, text: "T√¥i c·∫ßn ph√°t tri·ªÉn k·ªπ nƒÉng g√¨ ƒë·ªÉ th√†nh c√¥ng?", category: "skills" }
  ];

  const conversations = [
    { id: 1, title: "ƒê·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp CNTT", date: "H√¥m nay", active: true },
    { id: 2, title: "L·ªô tr√¨nh h·ªçc Marketing", date: "H√¥m qua" },
    { id: 3, title: "Ph√°t tri·ªÉn k·ªπ nƒÉng l√£nh ƒë·∫°o", date: "2 ng√†y tr∆∞·ªõc" },
    { id: 4, title: "Xu h∆∞·ªõng ng√†nh Y t·∫ø", date: "1 tu·∫ßn tr∆∞·ªõc" }
  ];

  const aiResponses = {
    career: [
      `Tuy·ªát v·ªùi! ƒê·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp l√† b∆∞·ªõc quan tr·ªçng trong cu·ªôc ƒë·ªùi. ƒê·ªÉ t√¥i c√≥ th·ªÉ t∆∞ v·∫•n ch√≠nh x√°c nh·∫•t, b·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt:

**üéØ V·ªÅ b·∫£n th√¢n:**
‚Ä¢ B·∫°n ƒëang h·ªçc t·ªï h·ª£p n√†o? (T·ª± nhi√™n, X√£ h·ªôi, hay Ch∆∞a x√°c ƒë·ªãnh)
‚Ä¢ M√¥n h·ªçc n√†o b·∫°n c·∫£m th·∫•y h·ª©ng th√∫ v√† h·ªçc t·ªët nh·∫•t?
‚Ä¢ B·∫°n c√≥ s·ªü th√≠ch ƒë·∫∑c bi·ªát n√†o kh√¥ng?

**üí≠ V·ªÅ mong mu·ªën:**
‚Ä¢ B·∫°n th√≠ch l√†m vi·ªác trong m√¥i tr∆∞·ªùng nh∆∞ th·∫ø n√†o?
‚Ä¢ C√≥ ng√†nh ngh·ªÅ n√†o b·∫°n ƒë√£ quan t√¢m ch∆∞a?
‚Ä¢ M·ª•c ti√™u thu nh·∫≠p v√† ph√°t tri·ªÉn c·ªßa b·∫°n?

D·ª±a tr√™n th√¥ng tin n√†y, t√¥i s·∫Ω ph√¢n t√≠ch v√† ƒë∆∞a ra nh·ªØng g·ª£i √Ω ph√π h·ª£p nh·∫•t! ‚ú®`,

      `R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n! Vi·ªác ƒë·ªãnh h∆∞·ªõng s·ªõm s·∫Ω gi√∫p b·∫°n c√≥ l·ªô tr√¨nh r√µ r√†ng v√† t·ª± tin h∆°n.

**üìä Quy tr√¨nh t∆∞ v·∫•n c·ªßa t√¥i:**

1. **ƒê√°nh gi√° nƒÉng l·ª±c** - Ph√¢n t√≠ch ƒëi·ªÉm m·∫°nh, s·ªü th√≠ch qua c√°c c√¢u h·ªèi
2. **Kh√°m ph√° ng√†nh ngh·ªÅ** - Gi·ªõi thi·ªáu c√°c lƒ©nh v·ª±c ph√π h·ª£p v·ªõi profile
3. **L·∫≠p l·ªô tr√¨nh** - K·∫ø ho·∫°ch h·ªçc t·∫≠p v√† ph√°t tri·ªÉn k·ªπ nƒÉng c·ª• th·ªÉ
4. **Theo d√µi ti·∫øn ƒë·ªô** - H·ªó tr·ª£ ƒëi·ªÅu ch·ªânh k·∫ø ho·∫°ch khi c·∫ßn

ƒê·ªÉ b·∫Øt ƒë·∫ßu, b·∫°n c√≥ mu·ªën l√†m b√†i test ƒë√°nh gi√° nƒÉng l·ª±c ng·∫Øn kh√¥ng? Ho·∫∑c chia s·∫ª tr·ª±c ti·∫øp v·ªÅ b·∫£n th√¢n c≈©ng ƒë∆∞·ª£c nh√©! üöÄ`
    ],
    trends: [
      `D·ª±a tr√™n xu h∆∞·ªõng th·ªã tr∆∞·ªùng lao ƒë·ªông 2024-2025, ƒë√¢y l√† nh·ªØng ng√†nh h·ªçc ƒëang "hot" nh·∫•t:

**üî• Top ng√†nh CNTT:**
‚Ä¢ **Tr√≠ tu·ªá nh√¢n t·∫°o (AI)** - M·ª©c l∆∞∆°ng: 15-50 tri·ªáu/th√°ng
‚Ä¢ **Data Science** - Ph√¢n t√≠ch d·ªØ li·ªáu l·ªõn
‚Ä¢ **Cybersecurity** - B·∫£o m·∫≠t th√¥ng tin
‚Ä¢ **Cloud Computing** - ƒêi·ªán to√°n ƒë√°m m√¢y
‚Ä¢ **IoT & Embedded Systems** - Internet v·∫°n v·∫≠t

**üíä Lƒ©nh v·ª±c Y t·∫ø:**
‚Ä¢ **Y h·ªçc s·ªë (Digital Health)** - K·∫øt h·ª£p c√¥ng ngh·ªá
‚Ä¢ **D∆∞·ª£c ph·∫©m** - Nghi√™n c·ª©u thu·ªëc m·ªõi
‚Ä¢ **Dinh d∆∞·ª°ng & Wellness** - S·ª©c kh·ªèe c·ªông ƒë·ªìng

**üå± Ng√†nh m·ªõi n·ªïi:**
‚Ä¢ **NƒÉng l∆∞·ª£ng t√°i t·∫°o** - Xu h∆∞·ªõng xanh
‚Ä¢ **Fintech** - C√¥ng ngh·ªá t√†i ch√≠nh  
‚Ä¢ **E-commerce & Digital Marketing**
‚Ä¢ **UX/UI Design** - Thi·∫øt k·∫ø tr·∫£i nghi·ªám

B·∫°n quan t√¢m lƒ©nh v·ª±c n√†o nh·∫•t? T√¥i c√≥ th·ªÉ t∆∞ v·∫•n chi ti·∫øt h∆°n! üéØ`,

      `Xu h∆∞·ªõng ngh·ªÅ nghi·ªáp ƒëang thay ƒë·ªïi r·∫•t nhanh! ƒê√¢y l√† ph√¢n t√≠ch m·ªõi nh·∫•t:

**üìà Nh·ªØng ng√†nh tƒÉng tr∆∞·ªüng m·∫°nh:**

**C√¥ng ngh·ªá & K·ªπ thu·∫≠t s·ªë:**
‚Ä¢ Developer (Web, Mobile, AI) - Nhu c·∫ßu tƒÉng 40%
‚Ä¢ Data Analyst/Scientist - TƒÉng 35%
‚Ä¢ Digital Marketing Specialist - TƒÉng 30%

**S·ª©c kh·ªèe & ChƒÉm s√≥c:**
‚Ä¢ ƒêi·ªÅu d∆∞·ª°ng chuy√™n khoa - TƒÉng 25%
‚Ä¢ T√¢m l√Ω h·ªçc ·ª©ng d·ª•ng - TƒÉng 20%
‚Ä¢ V·∫≠t l√Ω tr·ªã li·ªáu - TƒÉng 18%

**T√†i ch√≠nh & Kinh doanh:**
‚Ä¢ Financial Analyst - TƒÉng 22%
‚Ä¢ Project Manager - TƒÉng 15%
‚Ä¢ Sustainability Consultant - TƒÉng 28%

**üí° L·ªùi khuy√™n:** Ch·ªçn ng√†nh v·ª´a ph√π h·ª£p v·ªõi nƒÉng l·ª±c, v·ª´a c√≥ tri·ªÉn v·ªçng ph√°t tri·ªÉn. B·∫°n mu·ªën t√¨m hi·ªÉu ng√†nh n√†o c·ª• th·ªÉ?`
    ],
    planning: [
      `L·∫≠p k·∫ø ho·∫°ch h·ªçc t·∫≠p hi·ªáu qu·∫£ c·∫ßn c√≥ ph∆∞∆°ng ph√°p khoa h·ªçc! ƒê√¢y l√† framework t√¥i khuy√™n d√πng:

**üìã Ph∆∞∆°ng ph√°p SMART Goals:**
‚Ä¢ **S**pecific - M·ª•c ti√™u c·ª• th·ªÉ
‚Ä¢ **M**easurable - C√≥ th·ªÉ ƒëo l∆∞·ªùng
‚Ä¢ **A**chievable - Kh·∫£ thi
‚Ä¢ **R**elevant - Ph√π h·ª£p
‚Ä¢ **T**ime-bound - C√≥ th·ªùi h·∫°n

**üéØ C·∫•u tr√∫c k·∫ø ho·∫°ch 6 b∆∞·ªõc:**

1. **ƒê√°nh gi√° hi·ªán tr·∫°ng** (1 tu·∫ßn)
   - X√°c ƒë·ªãnh ƒëi·ªÉm m·∫°nh/y·∫øu
   - ƒêo l∆∞·ªùng nƒÉng l·ª±c hi·ªán t·∫°i

2. **X√°c ƒë·ªãnh m·ª•c ti√™u** (3 ng√†y)
   - M·ª•c ti√™u ng·∫Øn h·∫°n (3-6 th√°ng)
   - M·ª•c ti√™u d√†i h·∫°n (1-3 nƒÉm)

3. **L·∫≠p timeline** (2 ng√†y)
   - Chia nh·ªè m·ª•c ti√™u l·ªõn
   - ƒê·∫∑t milestone quan tr·ªçng

4. **Ph√¢n b·ªï th·ªùi gian** (1 ng√†y)
   - 60% th·ªùi gian cho m√¥n ch√≠nh
   - 25% cho k·ªπ nƒÉng m·ªÅm
   - 15% cho ho·∫°t ƒë·ªông th·ª±c h√†nh

5. **Ch·ªçn ph∆∞∆°ng ph√°p h·ªçc** (1 ng√†y)
   - T√¨m phong c√°ch h·ªçc ph√π h·ª£p
   - L·ª±a ch·ªçn t√†i li·ªáu, kh√≥a h·ªçc

6. **Theo d√µi & ƒëi·ªÅu ch·ªânh** (H√†ng tu·∫ßn)
   - Review ti·∫øn ƒë·ªô
   - T·ªëi ∆∞u ph∆∞∆°ng ph√°p

B·∫°n mu·ªën t√¥i h·ªó tr·ª£ b∆∞·ªõc n√†o tr∆∞·ªõc? üöÄ`
    ],
    skills: [
      `K·ªπ nƒÉng c·∫ßn thi·∫øt ƒë·ªÉ th√†nh c√¥ng trong th·ªùi ƒë·∫°i s·ªë hi·ªán nay r·∫•t ƒëa d·∫°ng! T√¥i s·∫Ω chia th√†nh 3 nh√≥m ch√≠nh:

**üß† Hard Skills (K·ªπ nƒÉng chuy√™n m√¥n):**
‚Ä¢ **K·ªπ nƒÉng s·ªë** - Tin h·ªçc vƒÉn ph√≤ng, l·∫≠p tr√¨nh c∆° b·∫£n
‚Ä¢ **Ngo·∫°i ng·ªØ** - Ti·∫øng Anh (IELTS 6.5+), ti·∫øng Trung/Nh·∫≠t
‚Ä¢ **Ph√¢n t√≠ch d·ªØ li·ªáu** - Excel n√¢ng cao, Power BI
‚Ä¢ **K·ªπ nƒÉng chuy√™n ng√†nh** - T√πy theo lƒ©nh v·ª±c

**üí° Soft Skills (K·ªπ nƒÉng m·ªÅm):**
‚Ä¢ **Giao ti·∫øp** - Thuy·∫øt tr√¨nh, vi·∫øt b√°o c√°o
‚Ä¢ **T∆∞ duy ph·∫£n bi·ªán** - Ph√¢n t√≠ch, gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ
‚Ä¢ **L√£nh ƒë·∫°o** - Qu·∫£n l√Ω nh√≥m, ra quy·∫øt ƒë·ªãnh
‚Ä¢ **Th√≠ch ·ª©ng** - Linh ho·∫°t v·ªõi thay ƒë·ªïi
‚Ä¢ **Qu·∫£n l√Ω th·ªùi gian** - T·ªëi ∆∞u hi·ªáu su·∫•t

**üéØ Meta Skills (K·ªπ nƒÉng h·ªçc t·∫≠p):**
‚Ä¢ **H·ªçc c√°ch h·ªçc** - Ph∆∞∆°ng ph√°p h·ªçc hi·ªáu qu·∫£
‚Ä¢ **T∆∞ duy s√°ng t·∫°o** - Innovation, out-of-the-box thinking
‚Ä¢ **Networking** - X√¢y d·ª±ng m·ªëi quan h·ªá
‚Ä¢ **Emotional Intelligence** - Hi·ªÉu bi·∫øt c·∫£m x√∫c

**üìà L·ªô tr√¨nh ph√°t tri·ªÉn 12 th√°ng:**
‚Ä¢ Th√°ng 1-3: N·ªÅn t·∫£ng (Giao ti·∫øp + Tin h·ªçc)
‚Ä¢ Th√°ng 4-6: Chuy√™n s√¢u (K·ªπ nƒÉng chuy√™n ng√†nh)
‚Ä¢ Th√°ng 7-9: M·ªü r·ªông (Ngo·∫°i ng·ªØ + L√£nh ƒë·∫°o)
‚Ä¢ Th√°ng 10-12: T·ªëi ∆∞u (Networking + S√°ng t·∫°o)

B·∫°n mu·ªën t·∫≠p trung ph√°t tri·ªÉn nh√≥m k·ªπ nƒÉng n√†o tr∆∞·ªõc? üé™`
    ],
    default: [
      `C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª! ƒê·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n t·ªët nh·∫•t, b·∫°n c√≥ th·ªÉ cung c·∫•p th√™m th√¥ng tin chi ti·∫øt kh√¥ng?

**ü§î M·ªôt s·ªë c√¢u h·ªèi g·ª£i √Ω:**
‚Ä¢ B·∫°n ƒëang ·ªü c·∫•p h·ªçc n√†o?
‚Ä¢ M·ª•c ti√™u c·ª• th·ªÉ c·ªßa b·∫°n l√† g√¨?
‚Ä¢ B·∫°n ƒëang g·∫∑p kh√≥ khƒÉn g√¨?
‚Ä¢ C√≥ ƒëi·ªÅu g√¨ ƒë·∫∑c bi·ªát b·∫°n mu·ªën t√¨m hi·ªÉu?

Ho·∫∑c b·∫°n c√≥ th·ªÉ ch·ªçn m·ªôt trong nh·ªØng ch·ªß ƒë·ªÅ ph·ªï bi·∫øn b√™n d∆∞·ªõi ƒë·ªÉ t√¥i t∆∞ v·∫•n chi ti·∫øt h∆°n! üí´`,

      `T√¥i hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. Tuy nhi√™n, ƒë·ªÉ ƒë∆∞a ra l·ªùi khuy√™n ch√≠nh x√°c v√† h·ªØu √≠ch nh·∫•t, t√¥i c·∫ßn hi·ªÉu r√µ h∆°n v·ªÅ:

**üìã B·ªëi c·∫£nh c·ªßa b·∫°n:**
‚Ä¢ ƒê·ªô tu·ªïi v√† c·∫•p h·ªçc hi·ªán t·∫°i
‚Ä¢ M·ª•c ti√™u ng·∫Øn h·∫°n v√† d√†i h·∫°n
‚Ä¢ Nh·ªØng th√°ch th·ª©c b·∫°n ƒëang g·∫∑p ph·∫£i

**üéØ Mong mu·ªën c·ª• th·ªÉ:**
‚Ä¢ B·∫°n mu·ªën ƒë∆∞·ª£c t∆∞ v·∫•n v·ªÅ v·∫•n ƒë·ªÅ g√¨?
‚Ä¢ C√≥ khung th·ªùi gian n√†o c·∫ßn ho√†n th√†nh kh√¥ng?
‚Ä¢ B·∫°n ƒë√£ th·ª≠ c√°ch n√†o ch∆∞a?

H√£y chia s·∫ª th√™m ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n m·ªôt c√°ch to√†n di·ªán nh·∫•t! üåü`
    ]
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const determineCategory = (message) => {
    const msg = message.toLowerCase();
    if (msg.includes('ƒë·ªãnh h∆∞·ªõng') || msg.includes('ngh·ªÅ nghi·ªáp') || msg.includes('l·ªõp 12') || msg.includes('ch·ªçn ng√†nh')) {
      return 'career';
    } else if (msg.includes('ng√†nh h·ªçc') || msg.includes('hot') || msg.includes('xu h∆∞·ªõng') || msg.includes('t∆∞∆°ng lai')) {
      return 'trends';
    } else if (msg.includes('k·∫ø ho·∫°ch') || msg.includes('l·∫≠p l·ªãch') || msg.includes('h·ªçc t·∫≠p') || msg.includes('l·ªô tr√¨nh')) {
      return 'planning';
    } else if (msg.includes('k·ªπ nƒÉng') || msg.includes('skill') || msg.includes('ph√°t tri·ªÉn')) {
      return 'skills';
    }
    return 'default';
  };

  const getRandomResponse = (category) => {
    const responses = aiResponses[category] || aiResponses.default;
    return responses[Math.floor(Math.random() * responses.length)];
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage = {
      id: Date.now(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date().toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Simulate AI response delay
    await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 1000));

    const category = determineCategory(inputMessage);
    const response = getRandomResponse(category);

    const botMessage = {
      id: Date.now() + 1,
      type: 'bot',
      content: response,
      timestamp: new Date().toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })
    };

    setMessages(prev => [...prev, botMessage]);
    setIsTyping(false);
  };

  const handleQuickPrompt = (prompt) => {
    setInputMessage(prompt);
    inputRef.current?.focus();
  };

  const formatMessage = (content) => {
    return content
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/\n/g, '<br/>');
  };

  const copyMessage = (content) => {
    navigator.clipboard.writeText(content.replace(/\*\*(.*?)\*\*/g, '$1').replace(/\*(.*?)\*/g, '$1'));
  };

  return (
    <div className="flex h-screen bg-gray-50">
      {/* Sidebar */}
      <div className={`${sidebarOpen ? 'translate-x-0' : '-translate-x-full'} fixed inset-y-0 left-0 z-50 w-64 bg-gray-900 transition-transform duration-300 ease-in-out lg:translate-x-0 lg:static lg:inset-0`}>
        <div className="flex items-center justify-between h-16 px-4 bg-gray-800">
          <h1 className="text-xl font-bold text-white">EduGuide AI</h1>
          <button
            onClick={() => setSidebarOpen(false)}
            className="lg:hidden text-gray-400 hover:text-white"
          >
            ‚úï
          </button>
        </div>
        
        <div className="p-4">
          <button className="w-full flex items-center gap-2 px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors">
            <Plus size={16} />
            Cu·ªôc tr√≤ chuy·ªán m·ªõi
          </button>
        </div>

        <div className="px-4 pb-4">
          <h3 className="text-xs font-medium text-gray-400 uppercase tracking-wide mb-3">L·ªãch s·ª≠ tr√≤ chuy·ªán</h3>
          <div className="space-y-1">
            {conversations.map((conv) => (
              <div
                key={conv.id}
                className={`flex items-center gap-3 px-3 py-2 rounded-lg cursor-pointer transition-colors ${
                  conv.active 
                    ? 'bg-gray-700 text-white' 
                    : 'text-gray-300 hover:bg-gray-800 hover:text-white'
                }`}
              >
                <MessageSquare size={16} />
                <div className="flex-1 min-w-0">
                  <div className="text-sm font-medium truncate">{conv.title}</div>
                  <div className="text-xs text-gray-400">{conv.date}</div>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="absolute bottom-0 left-0 right-0 p-4 bg-gray-800">
          <div className="flex items-center gap-3 text-sm text-gray-300">
            <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
              <User size={16} className="text-white" />
            </div>
            <div>
              <div className="font-medium">User</div>
              <div className="text-xs text-gray-400">Free Plan</div>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col min-w-0">
        {/* Header */}
        <div className="bg-white border-b border-gray-200 px-4 py-3 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <button
              onClick={() => setSidebarOpen(true)}
              className="lg:hidden p-2 text-gray-600 hover:bg-gray-100 rounded-lg"
            >
              <Menu size={20} />
            </button>
            <div className="flex items-center gap-2">
              <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                <Bot size={16} className="text-white" />
              </div>
              <div>
                <h2 className="font-semibold text-gray-900">EduGuide AI</h2>
                <p className="text-xs text-gray-500">Tr·ª£ l√Ω ƒë·ªãnh h∆∞·ªõng h·ªçc t·∫≠p</p>
              </div>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <button className="p-2 text-gray-600 hover:bg-gray-100 rounded-lg">
              <RotateCcw size={16} />
            </button>
          </div>
        </div>

        {/* Messages */}
        <div className="flex-1 overflow-y-auto">
          <div className="max-w-4xl mx-auto px-4 py-6">
            {messages.length === 1 && (
              <div className="mb-8">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                  {quickPrompts.map((prompt, index) => (
                    <button
                      key={index}
                      onClick={() => handleQuickPrompt(prompt.text)}
                      className="flex items-start gap-3 p-4 text-left border border-gray-200 rounded-xl hover:bg-gray-50 hover:border-gray-300 transition-colors"
                    >
                      <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0">
                        <prompt.icon size={16} className="text-blue-600" />
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-900">{prompt.text}</p>
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            )}

            {messages.map((message) => (
              <div key={message.id} className={`mb-6 ${message.type === 'user' ? 'ml-auto' : ''}`}>
                <div className={`flex gap-4 ${message.type === 'user' ? 'flex-row-reverse' : ''} max-w-4xl`}>
                  <div className="w-8 h-8 flex-shrink-0 flex items-center justify-center rounded-full">
                    {message.type === 'user' ? (
                      <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
                        <User size={16} className="text-white" />
                      </div>
                    ) : (
                      <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                        <Bot size={16} className="text-white" />
                      </div>
                    )}
                  </div>
                  <div className={`flex-1 ${message.type === 'user' ? 'text-right' : ''}`}>
                    <div className={`inline-block max-w-full ${
                      message.type === 'user' 
                        ? 'bg-blue-600 text-white rounded-xl px-4 py-2' 
                        : 'bg-transparent'
                    }`}>
                      <div 
                        className={`text-sm leading-relaxed ${message.type === 'user' ? 'text-white' : 'text-gray-900'}`}
                        dangerouslySetInnerHTML={{ __html: formatMessage(message.content) }}
                      />
                    </div>
                    <div className="flex items-center gap-2 mt-2">
                      <span className="text-xs text-gray-500">{message.timestamp}</span>
                      {message.type === 'bot' && (
                        <div className="flex items-center gap-1">
                          <button 
                            onClick={() => copyMessage(message.content)}
                            className="p-1 text-gray-400 hover:text-gray-600 rounded"
                          >
                            <Copy size={12} />
                          </button>
                          <button className="p-1 text-gray-400 hover:text-gray-600 rounded">
                            <ThumbsUp size={12} />
                          </button>
                          <button className="p-1 text-gray-400 hover:text-gray-600 rounded">
                            <ThumbsDown size={12} />
                          </button>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))}

            {isTyping && (
              <div className="mb-6">
                <div className="flex gap-4 max-w-4xl">
                  <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                    <Bot size={16} className="text-white" />
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center gap-2 text-gray-500">
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                      </div>
                      <span className="text-sm">ƒêang so·∫°n tin nh·∫Øn...</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
        </div>

        {/* Input */}
        <div className="border-t border-gray-200 bg-white p-4">
          <div className="max-w-4xl mx-auto">
            <div className="relative flex items-center gap-2">
              <div className="flex-1 relative">
                <textarea
                  ref={inputRef}
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                      e.preventDefault();
                      handleSendMessage();
                    }
                  }}
                  placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n... (Shift + Enter ƒë·ªÉ xu·ªëng d√≤ng)"
                  className="w-full px-4 py-3 pr-12 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                  rows="1"
                  style={{ minHeight: '48px', maxHeight: '120px' }}
                />
                <div className="absolute right-2 bottom-2 flex items-center gap-1">
                  <button className="p-1.5 text-gray-400 hover:text-gray-600 rounded">
                    <Paperclip size={16} />
                  </button>
                  <button className="p-1.5 text-gray-400 hover:text-gray-600 rounded">
                    <Mic size={16} />
                  </button>
                </div>
              </div>
              <button
                onClick={handleSendMessage}
                disabled={!inputMessage.trim() || isTyping}
                className="p-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <Send size={16} />
              </button>
            </div>
            <div className="mt-2 text-xs text-gray-500 text-center">
              EduGuide AI c√≥ th·ªÉ t·∫°o ra th√¥ng tin kh√¥ng ch√≠nh x√°c. Vui l√≤ng ki·ªÉm tra c√°c th√¥ng tin quan tr·ªçng.
            </div>
          </div>
        </div>
      </div>

      {/* Mobile overlay */}
      {sidebarOpen && (
        <div
          className="fixed inset-0 bg-gray-600 bg-opacity-75 z-40 lg:hidden"
          onClick={() => setSidebarOpen(false)}
        />
      )}
    </div>
  );
};

export default AIChatbot;